-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation startRunApiRuns_RunExternalId_Start_BeamtimeId_Get
module AmarcordApi.Operations.StartRunApiRunsRunExternalIdStartBeamtimeIdGet where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified AmarcordApi.Common
import AmarcordApi.Types

-- | > GET /api/runs/{runExternalId}/start/{beamtimeId}
-- 
-- Start Run
startRunApiRuns_RunExternalId_Start_BeamtimeId_Get :: forall m . AmarcordApi.Common.MonadHTTP m => StartRunApiRunsRunExternalIdStartBeamtimeIdGetParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> AmarcordApi.Common.ClientT m (Network.HTTP.Client.Types.Response StartRunApiRunsRunExternalIdStartBeamtimeIdGetResponse) -- ^ Monadic computation which returns the result of the operation
startRunApiRuns_RunExternalId_Start_BeamtimeId_Get parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either StartRunApiRunsRunExternalIdStartBeamtimeIdGetResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> StartRunApiRunsRunExternalIdStartBeamtimeIdGetResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
sonStartRunOutput)
                                                                                                                                                                                                                                         | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 422) (Network.HTTP.Client.Types.responseStatus response) -> StartRunApiRunsRunExternalIdStartBeamtimeIdGetResponse422 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
alidationError)
                                                                                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (AmarcordApi.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET") ("/api/runs/" GHC.Base.<> (AmarcordApi.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (AmarcordApi.Common.textToByte GHC.Base.$ AmarcordApi.Common.stringifyModel (startRunApiRunsRunExternalIdStartBeamtimeIdGetParametersPathRunExternalId parameters))) GHC.Base.<> ("/start/" GHC.Base.<> (AmarcordApi.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (AmarcordApi.Common.textToByte GHC.Base.$ AmarcordApi.Common.stringifyModel (startRunApiRunsRunExternalIdStartBeamtimeIdGetParametersPathBeamtimeId parameters))) GHC.Base.<> "")))) GHC.Base.mempty)
-- | Defines the object schema located at @paths.\/api\/runs\/{runExternalId}\/start\/{beamtimeId}.GET.parameters@ in the specification.
-- 
-- 
data StartRunApiRunsRunExternalIdStartBeamtimeIdGetParameters = StartRunApiRunsRunExternalIdStartBeamtimeIdGetParameters {
  -- | pathBeamtimeId: Represents the parameter named \'beamtimeId\'
  startRunApiRunsRunExternalIdStartBeamtimeIdGetParametersPathBeamtimeId :: GHC.Types.Int
  -- | pathRunExternalId: Represents the parameter named \'runExternalId\'
  , startRunApiRunsRunExternalIdStartBeamtimeIdGetParametersPathRunExternalId :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON StartRunApiRunsRunExternalIdStartBeamtimeIdGetParameters
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathBeamtimeId" Data.Aeson.Types.ToJSON..= startRunApiRunsRunExternalIdStartBeamtimeIdGetParametersPathBeamtimeId obj] : ["pathRunExternalId" Data.Aeson.Types.ToJSON..= startRunApiRunsRunExternalIdStartBeamtimeIdGetParametersPathRunExternalId obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathBeamtimeId" Data.Aeson.Types.ToJSON..= startRunApiRunsRunExternalIdStartBeamtimeIdGetParametersPathBeamtimeId obj] : ["pathRunExternalId" Data.Aeson.Types.ToJSON..= startRunApiRunsRunExternalIdStartBeamtimeIdGetParametersPathRunExternalId obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON StartRunApiRunsRunExternalIdStartBeamtimeIdGetParameters
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "StartRunApiRunsRunExternalIdStartBeamtimeIdGetParameters" (\obj -> (GHC.Base.pure StartRunApiRunsRunExternalIdStartBeamtimeIdGetParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathBeamtimeId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathRunExternalId"))}
-- | Create a new 'StartRunApiRunsRunExternalIdStartBeamtimeIdGetParameters' with all required fields.
mkStartRunApiRunsRunExternalIdStartBeamtimeIdGetParameters :: GHC.Types.Int -- ^ 'startRunApiRunsRunExternalIdStartBeamtimeIdGetParametersPathBeamtimeId'
  -> GHC.Types.Int -- ^ 'startRunApiRunsRunExternalIdStartBeamtimeIdGetParametersPathRunExternalId'
  -> StartRunApiRunsRunExternalIdStartBeamtimeIdGetParameters
mkStartRunApiRunsRunExternalIdStartBeamtimeIdGetParameters startRunApiRunsRunExternalIdStartBeamtimeIdGetParametersPathBeamtimeId startRunApiRunsRunExternalIdStartBeamtimeIdGetParametersPathRunExternalId = StartRunApiRunsRunExternalIdStartBeamtimeIdGetParameters{startRunApiRunsRunExternalIdStartBeamtimeIdGetParametersPathBeamtimeId = startRunApiRunsRunExternalIdStartBeamtimeIdGetParametersPathBeamtimeId,
                                                                                                                                                                                                                                                                       startRunApiRunsRunExternalIdStartBeamtimeIdGetParametersPathRunExternalId = startRunApiRunsRunExternalIdStartBeamtimeIdGetParametersPathRunExternalId}
-- | Represents a response of the operation 'startRunApiRuns_RunExternalId_Start_BeamtimeId_Get'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'StartRunApiRunsRunExternalIdStartBeamtimeIdGetResponseError' is used.
data StartRunApiRunsRunExternalIdStartBeamtimeIdGetResponse =
   StartRunApiRunsRunExternalIdStartBeamtimeIdGetResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | StartRunApiRunsRunExternalIdStartBeamtimeIdGetResponse200 JsonStartRunOutput -- ^ Successful Response
  | StartRunApiRunsRunExternalIdStartBeamtimeIdGetResponse422 HTTPValidationError -- ^ Validation Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
