-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation readBeamtimeApiBeamtimes_BeamtimeId_Get
module AmarcordApi.Operations.ReadBeamtimeApiBeamtimesBeamtimeIdGet where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified AmarcordApi.Common
import AmarcordApi.Types

-- | > GET /api/beamtimes/{beamtimeId}
-- 
-- Read Beamtime
readBeamtimeApiBeamtimes_BeamtimeId_Get :: forall m . AmarcordApi.Common.MonadHTTP m => GHC.Types.Int -- ^ beamtimeId
  -> AmarcordApi.Common.ClientT m (Network.HTTP.Client.Types.Response ReadBeamtimeApiBeamtimesBeamtimeIdGetResponse) -- ^ Monadic computation which returns the result of the operation
readBeamtimeApiBeamtimes_BeamtimeId_Get beamtimeId = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either ReadBeamtimeApiBeamtimesBeamtimeIdGetResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> ReadBeamtimeApiBeamtimesBeamtimeIdGetResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          JsonBeamtime)
                                                                                                                                                                                                                     | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 422) (Network.HTTP.Client.Types.responseStatus response) -> ReadBeamtimeApiBeamtimesBeamtimeIdGetResponse422 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          HTTPValidationError)
                                                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (AmarcordApi.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET") ("/api/beamtimes/" GHC.Base.<> (AmarcordApi.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (AmarcordApi.Common.textToByte GHC.Base.$ AmarcordApi.Common.stringifyModel beamtimeId)) GHC.Base.<> "")) GHC.Base.mempty)
-- | Represents a response of the operation 'readBeamtimeApiBeamtimes_BeamtimeId_Get'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'ReadBeamtimeApiBeamtimesBeamtimeIdGetResponseError' is used.
data ReadBeamtimeApiBeamtimesBeamtimeIdGetResponse =
   ReadBeamtimeApiBeamtimesBeamtimeIdGetResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | ReadBeamtimeApiBeamtimesBeamtimeIdGetResponse200 JsonBeamtime -- ^ Successful Response
  | ReadBeamtimeApiBeamtimesBeamtimeIdGetResponse422 HTTPValidationError -- ^ Validation Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
