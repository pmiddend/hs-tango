-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema JsonUpdateBeamtimeScheduleInput
module AmarcordApi.Types.JsonUpdateBeamtimeScheduleInput where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified AmarcordApi.Common
import AmarcordApi.TypeAlias
import {-# SOURCE #-} AmarcordApi.Types.JsonBeamtimeScheduleRow

-- | Defines the object schema located at @components.schemas.JsonUpdateBeamtimeScheduleInput@ in the specification.
-- 
-- 
data JsonUpdateBeamtimeScheduleInput = JsonUpdateBeamtimeScheduleInput {
  -- | beamtime_id
  jsonUpdateBeamtimeScheduleInputBeamtimeId :: GHC.Types.Int
  -- | schedule
  , jsonUpdateBeamtimeScheduleInputSchedule :: ([JsonBeamtimeScheduleRow])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON JsonUpdateBeamtimeScheduleInput
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["beamtime_id" Data.Aeson.Types.ToJSON..= jsonUpdateBeamtimeScheduleInputBeamtimeId obj] : ["schedule" Data.Aeson.Types.ToJSON..= jsonUpdateBeamtimeScheduleInputSchedule obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["beamtime_id" Data.Aeson.Types.ToJSON..= jsonUpdateBeamtimeScheduleInputBeamtimeId obj] : ["schedule" Data.Aeson.Types.ToJSON..= jsonUpdateBeamtimeScheduleInputSchedule obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON JsonUpdateBeamtimeScheduleInput
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "JsonUpdateBeamtimeScheduleInput" (\obj -> (GHC.Base.pure JsonUpdateBeamtimeScheduleInput GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "beamtime_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "schedule"))}
-- | Create a new 'JsonUpdateBeamtimeScheduleInput' with all required fields.
mkJsonUpdateBeamtimeScheduleInput :: GHC.Types.Int -- ^ 'jsonUpdateBeamtimeScheduleInputBeamtimeId'
  -> [JsonBeamtimeScheduleRow] -- ^ 'jsonUpdateBeamtimeScheduleInputSchedule'
  -> JsonUpdateBeamtimeScheduleInput
mkJsonUpdateBeamtimeScheduleInput jsonUpdateBeamtimeScheduleInputBeamtimeId jsonUpdateBeamtimeScheduleInputSchedule = JsonUpdateBeamtimeScheduleInput{jsonUpdateBeamtimeScheduleInputBeamtimeId = jsonUpdateBeamtimeScheduleInputBeamtimeId,
                                                                                                                                                      jsonUpdateBeamtimeScheduleInputSchedule = jsonUpdateBeamtimeScheduleInputSchedule}
