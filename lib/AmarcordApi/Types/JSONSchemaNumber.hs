-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema JSONSchemaNumber
module AmarcordApi.Types.JSONSchemaNumber where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified AmarcordApi.Common
import AmarcordApi.TypeAlias

-- | Defines the object schema located at @components.schemas.JSONSchemaNumber@ in the specification.
-- 
-- 
data JSONSchemaNumber = JSONSchemaNumber {
  -- | exclusiveMaximum
  jSONSchemaNumberExclusiveMaximum :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | exclusiveMinimum
  , jSONSchemaNumberExclusiveMinimum :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | format
  , jSONSchemaNumberFormat :: (GHC.Maybe.Maybe JSONSchemaNumberFormat')
  -- | maximum
  , jSONSchemaNumberMaximum :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | minimum
  , jSONSchemaNumberMinimum :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | suffix
  , jSONSchemaNumberSuffix :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | tolerance
  , jSONSchemaNumberTolerance :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | toleranceIsAbsolute
  , jSONSchemaNumberToleranceIsAbsolute :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON JSONSchemaNumber
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exclusiveMaximum" Data.Aeson.Types.ToJSON..=)) (jSONSchemaNumberExclusiveMaximum obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exclusiveMinimum" Data.Aeson.Types.ToJSON..=)) (jSONSchemaNumberExclusiveMinimum obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("format" Data.Aeson.Types.ToJSON..=)) (jSONSchemaNumberFormat obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("maximum" Data.Aeson.Types.ToJSON..=)) (jSONSchemaNumberMaximum obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("minimum" Data.Aeson.Types.ToJSON..=)) (jSONSchemaNumberMinimum obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("suffix" Data.Aeson.Types.ToJSON..=)) (jSONSchemaNumberSuffix obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tolerance" Data.Aeson.Types.ToJSON..=)) (jSONSchemaNumberTolerance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("toleranceIsAbsolute" Data.Aeson.Types.ToJSON..=)) (jSONSchemaNumberToleranceIsAbsolute obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "number"] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exclusiveMaximum" Data.Aeson.Types.ToJSON..=)) (jSONSchemaNumberExclusiveMaximum obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exclusiveMinimum" Data.Aeson.Types.ToJSON..=)) (jSONSchemaNumberExclusiveMinimum obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("format" Data.Aeson.Types.ToJSON..=)) (jSONSchemaNumberFormat obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("maximum" Data.Aeson.Types.ToJSON..=)) (jSONSchemaNumberMaximum obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("minimum" Data.Aeson.Types.ToJSON..=)) (jSONSchemaNumberMinimum obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("suffix" Data.Aeson.Types.ToJSON..=)) (jSONSchemaNumberSuffix obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tolerance" Data.Aeson.Types.ToJSON..=)) (jSONSchemaNumberTolerance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("toleranceIsAbsolute" Data.Aeson.Types.ToJSON..=)) (jSONSchemaNumberToleranceIsAbsolute obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "number"] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON JSONSchemaNumber
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "JSONSchemaNumber" (\obj -> (((((((GHC.Base.pure JSONSchemaNumber GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exclusiveMaximum")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exclusiveMinimum")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "format")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "maximum")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "minimum")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "suffix")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tolerance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "toleranceIsAbsolute"))}
-- | Create a new 'JSONSchemaNumber' with all required fields.
mkJSONSchemaNumber :: JSONSchemaNumber
mkJSONSchemaNumber = JSONSchemaNumber{jSONSchemaNumberExclusiveMaximum = GHC.Maybe.Nothing,
                                      jSONSchemaNumberExclusiveMinimum = GHC.Maybe.Nothing,
                                      jSONSchemaNumberFormat = GHC.Maybe.Nothing,
                                      jSONSchemaNumberMaximum = GHC.Maybe.Nothing,
                                      jSONSchemaNumberMinimum = GHC.Maybe.Nothing,
                                      jSONSchemaNumberSuffix = GHC.Maybe.Nothing,
                                      jSONSchemaNumberTolerance = GHC.Maybe.Nothing,
                                      jSONSchemaNumberToleranceIsAbsolute = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.JSONSchemaNumber.properties.format@ in the specification.
-- 
-- 
data JSONSchemaNumberFormat' =
   JSONSchemaNumberFormat'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | JSONSchemaNumberFormat'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | JSONSchemaNumberFormat'EnumStandardUnit -- ^ Represents the JSON value @"standard-unit"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON JSONSchemaNumberFormat'
    where {toJSON (JSONSchemaNumberFormat'Other val) = val;
           toJSON (JSONSchemaNumberFormat'Typed val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (JSONSchemaNumberFormat'EnumStandardUnit) = "standard-unit"}
instance Data.Aeson.Types.FromJSON.FromJSON JSONSchemaNumberFormat'
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "standard-unit" -> JSONSchemaNumberFormat'EnumStandardUnit
                                             | GHC.Base.otherwise -> JSONSchemaNumberFormat'Other val)}
