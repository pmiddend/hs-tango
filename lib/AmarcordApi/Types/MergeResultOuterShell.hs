-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema MergeResultOuterShell
module AmarcordApi.Types.MergeResultOuterShell where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified AmarcordApi.Common
import AmarcordApi.TypeAlias

-- | Defines the object schema located at @components.schemas.MergeResultOuterShell@ in the specification.
-- 
-- 
data MergeResultOuterShell = MergeResultOuterShell {
  -- | cc
  mergeResultOuterShellCc :: GHC.Types.Double
  -- | ccstar
  , mergeResultOuterShellCcstar :: GHC.Types.Double
  -- | completeness
  , mergeResultOuterShellCompleteness :: GHC.Types.Double
  -- | max_res
  , mergeResultOuterShellMaxRes :: GHC.Types.Double
  -- | min_res
  , mergeResultOuterShellMinRes :: GHC.Types.Double
  -- | r_split
  , mergeResultOuterShellRSplit :: GHC.Types.Double
  -- | redundancy
  , mergeResultOuterShellRedundancy :: GHC.Types.Double
  -- | resolution
  , mergeResultOuterShellResolution :: GHC.Types.Double
  -- | snr
  , mergeResultOuterShellSnr :: GHC.Types.Double
  -- | unique_reflections
  , mergeResultOuterShellUniqueReflections :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON MergeResultOuterShell
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cc" Data.Aeson.Types.ToJSON..= mergeResultOuterShellCc obj] : ["ccstar" Data.Aeson.Types.ToJSON..= mergeResultOuterShellCcstar obj] : ["completeness" Data.Aeson.Types.ToJSON..= mergeResultOuterShellCompleteness obj] : ["max_res" Data.Aeson.Types.ToJSON..= mergeResultOuterShellMaxRes obj] : ["min_res" Data.Aeson.Types.ToJSON..= mergeResultOuterShellMinRes obj] : ["r_split" Data.Aeson.Types.ToJSON..= mergeResultOuterShellRSplit obj] : ["redundancy" Data.Aeson.Types.ToJSON..= mergeResultOuterShellRedundancy obj] : ["resolution" Data.Aeson.Types.ToJSON..= mergeResultOuterShellResolution obj] : ["snr" Data.Aeson.Types.ToJSON..= mergeResultOuterShellSnr obj] : ["unique_reflections" Data.Aeson.Types.ToJSON..= mergeResultOuterShellUniqueReflections obj] : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cc" Data.Aeson.Types.ToJSON..= mergeResultOuterShellCc obj] : ["ccstar" Data.Aeson.Types.ToJSON..= mergeResultOuterShellCcstar obj] : ["completeness" Data.Aeson.Types.ToJSON..= mergeResultOuterShellCompleteness obj] : ["max_res" Data.Aeson.Types.ToJSON..= mergeResultOuterShellMaxRes obj] : ["min_res" Data.Aeson.Types.ToJSON..= mergeResultOuterShellMinRes obj] : ["r_split" Data.Aeson.Types.ToJSON..= mergeResultOuterShellRSplit obj] : ["redundancy" Data.Aeson.Types.ToJSON..= mergeResultOuterShellRedundancy obj] : ["resolution" Data.Aeson.Types.ToJSON..= mergeResultOuterShellResolution obj] : ["snr" Data.Aeson.Types.ToJSON..= mergeResultOuterShellSnr obj] : ["unique_reflections" Data.Aeson.Types.ToJSON..= mergeResultOuterShellUniqueReflections obj] : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON MergeResultOuterShell
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "MergeResultOuterShell" (\obj -> (((((((((GHC.Base.pure MergeResultOuterShell GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ccstar")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "completeness")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "max_res")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "min_res")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "r_split")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "redundancy")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "resolution")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "snr")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "unique_reflections"))}
-- | Create a new 'MergeResultOuterShell' with all required fields.
mkMergeResultOuterShell :: GHC.Types.Double -- ^ 'mergeResultOuterShellCc'
  -> GHC.Types.Double -- ^ 'mergeResultOuterShellCcstar'
  -> GHC.Types.Double -- ^ 'mergeResultOuterShellCompleteness'
  -> GHC.Types.Double -- ^ 'mergeResultOuterShellMaxRes'
  -> GHC.Types.Double -- ^ 'mergeResultOuterShellMinRes'
  -> GHC.Types.Double -- ^ 'mergeResultOuterShellRSplit'
  -> GHC.Types.Double -- ^ 'mergeResultOuterShellRedundancy'
  -> GHC.Types.Double -- ^ 'mergeResultOuterShellResolution'
  -> GHC.Types.Double -- ^ 'mergeResultOuterShellSnr'
  -> GHC.Types.Int -- ^ 'mergeResultOuterShellUniqueReflections'
  -> MergeResultOuterShell
mkMergeResultOuterShell mergeResultOuterShellCc mergeResultOuterShellCcstar mergeResultOuterShellCompleteness mergeResultOuterShellMaxRes mergeResultOuterShellMinRes mergeResultOuterShellRSplit mergeResultOuterShellRedundancy mergeResultOuterShellResolution mergeResultOuterShellSnr mergeResultOuterShellUniqueReflections = MergeResultOuterShell{mergeResultOuterShellCc = mergeResultOuterShellCc,
                                                                                                                                                                                                                                                                                                                                                          mergeResultOuterShellCcstar = mergeResultOuterShellCcstar,
                                                                                                                                                                                                                                                                                                                                                          mergeResultOuterShellCompleteness = mergeResultOuterShellCompleteness,
                                                                                                                                                                                                                                                                                                                                                          mergeResultOuterShellMaxRes = mergeResultOuterShellMaxRes,
                                                                                                                                                                                                                                                                                                                                                          mergeResultOuterShellMinRes = mergeResultOuterShellMinRes,
                                                                                                                                                                                                                                                                                                                                                          mergeResultOuterShellRSplit = mergeResultOuterShellRSplit,
                                                                                                                                                                                                                                                                                                                                                          mergeResultOuterShellRedundancy = mergeResultOuterShellRedundancy,
                                                                                                                                                                                                                                                                                                                                                          mergeResultOuterShellResolution = mergeResultOuterShellResolution,
                                                                                                                                                                                                                                                                                                                                                          mergeResultOuterShellSnr = mergeResultOuterShellSnr,
                                                                                                                                                                                                                                                                                                                                                          mergeResultOuterShellUniqueReflections = mergeResultOuterShellUniqueReflections}
