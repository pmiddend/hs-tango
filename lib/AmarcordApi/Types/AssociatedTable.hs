-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema AssociatedTable
module AmarcordApi.Types.AssociatedTable where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified AmarcordApi.Common
import AmarcordApi.TypeAlias

-- | Defines the enum schema located at @components.schemas.AssociatedTable@ in the specification.
-- 
-- An enumeration.
data AssociatedTable =
   AssociatedTableOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | AssociatedTableTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | AssociatedTableEnumRun -- ^ Represents the JSON value @"run"@
  | AssociatedTableEnumChemical -- ^ Represents the JSON value @"chemical"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON AssociatedTable
    where {toJSON (AssociatedTableOther val) = val;
           toJSON (AssociatedTableTyped val) = Data.Aeson.Types.ToJSON.toJSON val;
           toJSON (AssociatedTableEnumRun) = "run";
           toJSON (AssociatedTableEnumChemical) = "chemical"}
instance Data.Aeson.Types.FromJSON.FromJSON AssociatedTable
    where {parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "run" -> AssociatedTableEnumRun
                                             | val GHC.Classes.== "chemical" -> AssociatedTableEnumChemical
                                             | GHC.Base.otherwise -> AssociatedTableOther val)}
