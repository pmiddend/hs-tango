-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema JsonMergeResult
module AmarcordApi.Types.JsonMergeResult where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified AmarcordApi.Common
import AmarcordApi.TypeAlias
import {-# SOURCE #-} AmarcordApi.Types.JsonMergeParameters
import {-# SOURCE #-} AmarcordApi.Types.JsonMergeResultStateDone
import {-# SOURCE #-} AmarcordApi.Types.JsonMergeResultStateError
import {-# SOURCE #-} AmarcordApi.Types.JsonMergeResultStateQueued
import {-# SOURCE #-} AmarcordApi.Types.JsonMergeResultStateRunning
import {-# SOURCE #-} AmarcordApi.Types.JsonRefinementResult

-- | Defines the object schema located at @components.schemas.JsonMergeResult@ in the specification.
-- 
-- 
data JsonMergeResult = JsonMergeResult {
  -- | cell_description
  jsonMergeResultCellDescription :: Data.Text.Internal.Text
  -- | created
  , jsonMergeResultCreated :: GHC.Types.Int
  -- | id
  , jsonMergeResultId :: GHC.Types.Int
  -- | parameters
  , jsonMergeResultParameters :: JsonMergeParameters
  -- | point_group
  , jsonMergeResultPointGroup :: Data.Text.Internal.Text
  -- | refinement_results
  , jsonMergeResultRefinementResults :: ([JsonRefinementResult])
  -- | runs
  , jsonMergeResultRuns :: ([Data.Text.Internal.Text])
  -- | state_done
  , jsonMergeResultStateDone :: (GHC.Maybe.Maybe JsonMergeResultStateDone)
  -- | state_error
  , jsonMergeResultStateError :: (GHC.Maybe.Maybe JsonMergeResultStateError)
  -- | state_queued
  , jsonMergeResultStateQueued :: (GHC.Maybe.Maybe JsonMergeResultStateQueued)
  -- | state_running
  , jsonMergeResultStateRunning :: (GHC.Maybe.Maybe JsonMergeResultStateRunning)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON JsonMergeResult
    where {toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cell_description" Data.Aeson.Types.ToJSON..= jsonMergeResultCellDescription obj] : ["created" Data.Aeson.Types.ToJSON..= jsonMergeResultCreated obj] : ["id" Data.Aeson.Types.ToJSON..= jsonMergeResultId obj] : ["parameters" Data.Aeson.Types.ToJSON..= jsonMergeResultParameters obj] : ["point_group" Data.Aeson.Types.ToJSON..= jsonMergeResultPointGroup obj] : ["refinement_results" Data.Aeson.Types.ToJSON..= jsonMergeResultRefinementResults obj] : ["runs" Data.Aeson.Types.ToJSON..= jsonMergeResultRuns obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state_done" Data.Aeson.Types.ToJSON..=)) (jsonMergeResultStateDone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state_error" Data.Aeson.Types.ToJSON..=)) (jsonMergeResultStateError obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state_queued" Data.Aeson.Types.ToJSON..=)) (jsonMergeResultStateQueued obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state_running" Data.Aeson.Types.ToJSON..=)) (jsonMergeResultStateRunning obj) : GHC.Base.mempty));
           toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cell_description" Data.Aeson.Types.ToJSON..= jsonMergeResultCellDescription obj] : ["created" Data.Aeson.Types.ToJSON..= jsonMergeResultCreated obj] : ["id" Data.Aeson.Types.ToJSON..= jsonMergeResultId obj] : ["parameters" Data.Aeson.Types.ToJSON..= jsonMergeResultParameters obj] : ["point_group" Data.Aeson.Types.ToJSON..= jsonMergeResultPointGroup obj] : ["refinement_results" Data.Aeson.Types.ToJSON..= jsonMergeResultRefinementResults obj] : ["runs" Data.Aeson.Types.ToJSON..= jsonMergeResultRuns obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state_done" Data.Aeson.Types.ToJSON..=)) (jsonMergeResultStateDone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state_error" Data.Aeson.Types.ToJSON..=)) (jsonMergeResultStateError obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state_queued" Data.Aeson.Types.ToJSON..=)) (jsonMergeResultStateQueued obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state_running" Data.Aeson.Types.ToJSON..=)) (jsonMergeResultStateRunning obj) : GHC.Base.mempty)))}
instance Data.Aeson.Types.FromJSON.FromJSON JsonMergeResult
    where {parseJSON = Data.Aeson.Types.FromJSON.withObject "JsonMergeResult" (\obj -> ((((((((((GHC.Base.pure JsonMergeResult GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cell_description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "parameters")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "point_group")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "refinement_results")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "runs")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state_done")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state_error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state_queued")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state_running"))}
-- | Create a new 'JsonMergeResult' with all required fields.
mkJsonMergeResult :: Data.Text.Internal.Text -- ^ 'jsonMergeResultCellDescription'
  -> GHC.Types.Int -- ^ 'jsonMergeResultCreated'
  -> GHC.Types.Int -- ^ 'jsonMergeResultId'
  -> JsonMergeParameters -- ^ 'jsonMergeResultParameters'
  -> Data.Text.Internal.Text -- ^ 'jsonMergeResultPointGroup'
  -> [JsonRefinementResult] -- ^ 'jsonMergeResultRefinementResults'
  -> [Data.Text.Internal.Text] -- ^ 'jsonMergeResultRuns'
  -> JsonMergeResult
mkJsonMergeResult jsonMergeResultCellDescription jsonMergeResultCreated jsonMergeResultId jsonMergeResultParameters jsonMergeResultPointGroup jsonMergeResultRefinementResults jsonMergeResultRuns = JsonMergeResult{jsonMergeResultCellDescription = jsonMergeResultCellDescription,
                                                                                                                                                                                                                     jsonMergeResultCreated = jsonMergeResultCreated,
                                                                                                                                                                                                                     jsonMergeResultId = jsonMergeResultId,
                                                                                                                                                                                                                     jsonMergeResultParameters = jsonMergeResultParameters,
                                                                                                                                                                                                                     jsonMergeResultPointGroup = jsonMergeResultPointGroup,
                                                                                                                                                                                                                     jsonMergeResultRefinementResults = jsonMergeResultRefinementResults,
                                                                                                                                                                                                                     jsonMergeResultRuns = jsonMergeResultRuns,
                                                                                                                                                                                                                     jsonMergeResultStateDone = GHC.Maybe.Nothing,
                                                                                                                                                                                                                     jsonMergeResultStateError = GHC.Maybe.Nothing,
                                                                                                                                                                                                                     jsonMergeResultStateQueued = GHC.Maybe.Nothing,
                                                                                                                                                                                                                     jsonMergeResultStateRunning = GHC.Maybe.Nothing}
